---
title: "STAT 331 Midterm Portfolio"
author: "Amir Sepasian"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv


# Lab 2 Question 2

teacher <- read_csv(here::here("data", "teacher_evals.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

# Practice Assignment 4

military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 6, 
                      n_max = 199 )

```

-   `txt`

```{r}
#| label: wd-1-txt

# Check-in 2.3: Importing Data Question 3

ages_tab <- read.table(file = here::here("Week 2", "Check-ins", "Ages_Data", "ages_tab.txt"))

```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2

# Lab 3 Question 5

teacher_evals_clean <- teacher |>
  rename("sex" = "gender") |>
  filter(no_participants > 10) |>
  mutate(teacher_id = as.character(teacher_id)) |>
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants, 
         resp_share,    
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex)

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric

# Lab 3 Question 8

teacher_evals_clean |>
  group_by(course_id, teacher_id) |>
  summarise(questions = n_distinct(question_no)) |>
  filter(questions == 9) 

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5
# Finding the interview of initial suspect

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(date == '2018-01-15',
         type == 'murder',
         city == 'SQL City') |>
  pull(description)


witness1 <- person |>
  filter(address_street_name == 'Northwestern Dr', 
         address_number == max(address_number)) |>
  left_join(interview, 
             by = join_by(id == person_id)) |>
  pull(transcript)|>
  print()


witness2 <- person |>
  filter(address_street_name == 'Franklin Ave', 
         str_detect(name, 'Annabel')) |>
  left_join(interview, 
             by = join_by(id == person_id)) |>
  pull(transcript) |>
  print()



get_fit_now_check_in |>
  
  full_join(get_fit_now_member, 
             by = join_by(membership_id == id)) |>
  
  inner_join(person, 
             by = join_by(person_id == id,
                          name == name)) |>
  inner_join(interview,
             by = join_by(person_id == person_id)) |>
  
  inner_join(drivers_license,
             by = join_by(license_id == id)) |>


  filter(membership_status == 'gold',
         str_detect(membership_id, 
                    '^48Z'),
         str_detect(plate_number, 
                    '.H42W')
         ) 

```

-   factor

```{r}
#| label: wd-3-factor

# Lab 4 Question 2

ca_childcare <- childcare_costs |>
  left_join(counties, by = join_by(county_fips_code == county_fips_code)) |>
  filter(state_name == "California")

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date


```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

# Challenge 3 Question 1

teacher_evals_compare <- teacher |>
  filter(question_no == 903) |>
  mutate(SET_level = if_else(SET_score_avg >= 4, 
                             "excellent", 
                             "standard"),
         sen_level = if_else(seniority <= 4, 
                             "Junior", 
                             "Senior")) |>
  select(course_id, SET_level, sen_level)

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

# Lab 4 Question 6

ca_childcare |>
  
  pivot_longer(mc_infant:mc_preschool,
               names_to = "Child Category",
               values_to = "Median Price") |>
  
  select(Region, 
         study_year, 
         `Child Category`, 
         `Median Price`) |>
  
  mutate(`Child Category` = fct_recode(.f = `Child Category`,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"),
         
         `Child Category` = fct_relevel(`Child Category`,
                                        "Infant", 
                                        "Toddler", 
                                        "Preschool")
         ) |>
  
  ggplot(aes(x = study_year, 
             y = `Median Price`, 
             color = fct_reorder2(.f = Region, 
                                  .x = study_year, 
                                  .y = `Median Price`)
             )
         ) +
  
  geom_point() +
  geom_smooth(aes(colour = factor(Region), 
                  method = "loess")) +
  
  facet_wrap(~ `Child Category`) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(breaks = seq(100, 700, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, 'Accent'))(10)) +
  theme(aspect.ratio = 1) +
  theme_bw() 

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

# Lab 4 Question 3

ca_childcare <- ca_childcare |> 
  mutate(Region = fct_collapse(.f = county_name, 
                               
                               "Superior California" = c("Butte County", "Colusa County", 
                                                         "El Dorado County","Glenn County", 
                                                         "Lassen County", "Modoc County", 
                                                         "Nevada County", "Placer County", 
                                                         "Plumas County", "Sacramento County", 
                                                         "Shasta County", "Sierra County", 
                                                         "Siskiyou County", "Sutter County", 
                                                         "Tehama County", "Yolo County", 
                                                         "Yuba County"), 
                               "North Coast" = c("Del Norte County", "Humboldt County", 
                                                 "Lake County", "Mendocino County", 
                                                 "Napa County", "Sonoma County", 
                                                 "Trinity County"),
                               "San Francisco Bay Area" = c("Alameda County", "Contra Costa County", 
                                                            "Marin County", "San Francisco County",
                                                            "San Mateo County", "Santa Clara County", 
                                                            "Solano County"),
                               "Northen San Joaquin Valley" = c("Alpine County", "Amador County", 
                                                                "Calaveras County", "Madera County", 
                                                                "Mariposa County", "Merced County", 
                                                                "Mono County", "San Joaquin County", 
                                                                "Stanislaus County", "Tuolumne County"),
                               "Central Coast" = c("Monterey County", "San Benito County", 
                                                   "San Luis Obispo County", "Santa Barbara County", 
                                                   "Santa Cruz County", "Ventura County"),
                               "Southern San Joaquin Valley" = c("Fresno County", "Inyo County", 
                                                                 "Kern County", "Kings County", 
                                                                 "Tulare County"),
                               "Inland Empire" = c("Riverside County", "San Bernardino County"),
                               "LA County" = c("Los Angeles County"),
                               "Orange County" = c("Orange County"),
                               "San Diego-Imperial" =c("Imperial County", "San Diego County")
              
                               ),
         .after = county_fips_code
         )

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

# Lab 5
# Finding the interview of initial suspect

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(date == '2018-01-15',
         type == 'murder',
         city == 'SQL City') |>
  pull(description)


witness1 <- person |>
  filter(address_street_name == 'Northwestern Dr', 
         address_number == max(address_number)) |>
  left_join(interview, 
             by = join_by(id == person_id)) |>
  pull(transcript)|>
  print()


witness2 <- person |>
  filter(address_street_name == 'Franklin Ave', 
         str_detect(name, 'Annabel')) |>
  left_join(interview, 
             by = join_by(id == person_id)) |>
  pull(transcript) |>
  print()



get_fit_now_check_in |>
  
  full_join(get_fit_now_member, 
             by = join_by(membership_id == id)) |>
  
  inner_join(person, 
             by = join_by(person_id == id,
                          name == name)) |>
  inner_join(interview,
             by = join_by(person_id == person_id)) |>
  
  inner_join(drivers_license,
             by = join_by(license_id == id)) |>


  filter(membership_status == 'gold',
         str_detect(membership_id, 
                    '^48Z'),
         str_detect(plate_number, 
                    '.H42W')
         ) 

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

# Lab 5
# Finding who hired Jermey Bowers

person |>
  
  inner_join(facebook_event_checkin,
             by = join_by(id == person_id)) |>
  
  inner_join(drivers_license,
             by = join_by(license_id == id)) |>
  
  left_join(income,
             by = join_by(ssn == ssn)) |>
  
  filter(height %in% c(65, 66, 67),
         car_model == 'Model S',
         hair_color == 'red') |>

# Validating the suspect by checking whether an interview exists
  semi_join(interview,
             by = join_by(id == person_id))

```

-   `right_join()`

```{r}
#| label: wd-5-right

# Lab 4 Question 2

ca_childcare <- counties |>
  right_join(childcare_costs, by = join_by(county_fips_code == county_fips_code)) |>
  filter(state_name == "California")

```

-   `inner_join()`

```{r}
#| label: wd-5-inner

# Lab 5
# Finding who hired Jermey Bowers

person |>
  
  inner_join(facebook_event_checkin,
             by = join_by(id == person_id)) |>
  
  inner_join(drivers_license,
             by = join_by(license_id == id)) |>
  
  left_join(income,
             by = join_by(ssn == ssn)) |>
  
  filter(height %in% c(65, 66, 67),
         car_model == 'Model S',
         hair_color == 'red') |>

# Validating the suspect by checking whether an interview exists
  semi_join(interview,
             by = join_by(id == person_id))
```

-   `full_join()`

```{r}
#| label: wd-5-full

# Lab 5
# Finding the interview of initial suspect

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(date == '2018-01-15',
         type == 'murder',
         city == 'SQL City') |>
  pull(description)


witness1 <- person |>
  filter(address_street_name == 'Northwestern Dr', 
         address_number == max(address_number)) |>
  left_join(interview, 
             by = join_by(id == person_id)) |>
  pull(transcript)|>
  print()


witness2 <- person |>
  filter(address_street_name == 'Franklin Ave', 
         str_detect(name, 'Annabel')) |>
  left_join(interview, 
             by = join_by(id == person_id)) |>
  pull(transcript) |>
  print()



get_fit_now_check_in |>
  
  full_join(get_fit_now_member, 
             by = join_by(membership_id == id)) |>
  
  inner_join(person, 
             by = join_by(person_id == id,
                          name == name)) |>
  inner_join(interview,
             by = join_by(person_id == person_id)) |>
  
  inner_join(drivers_license,
             by = join_by(license_id == id)) |>


  filter(membership_status == 'gold',
         str_detect(membership_id, 
                    '^48Z'),
         str_detect(plate_number, 
                    '.H42W')
         ) 

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

# Lab 5
# Finding who hired Jermey Bowers

person |>
  
  inner_join(facebook_event_checkin,
             by = join_by(id == person_id)) |>
  
  inner_join(drivers_license,
             by = join_by(license_id == id)) |>
  
  left_join(income,
             by = join_by(ssn == ssn)) |>
  
  filter(height %in% c(65, 66, 67),
         car_model == 'Model S',
         hair_color == 'red') |>

# Validating the suspect by checking whether an interview exists
  semi_join(interview,
             by = join_by(id == person_id))
```

-   `anti_join()`

```{r}
#| label: wd-6-anti

# Will implement in the Final

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# Lab 4 Question 6

ca_childcare |>
  
  pivot_longer(mc_infant:mc_preschool,
               names_to = "Child Category",
               values_to = "Median Price") |>
  
  select(Region, 
         study_year, 
         `Child Category`, 
         `Median Price`) |>
  
  mutate(`Child Category` = fct_recode(.f = `Child Category`,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"),
         
         `Child Category` = fct_relevel(`Child Category`,
                                        "Infant", 
                                        "Toddler", 
                                        "Preschool")
         ) |>
  
  ggplot(aes(x = study_year, 
             y = `Median Price`, 
             color = fct_reorder2(.f = Region, 
                                  .x = study_year, 
                                  .y = `Median Price`)
             )
         ) +
  
  geom_point() +
  geom_smooth(aes(colour = factor(Region), 
                  method = "loess")) +
  
  facet_wrap(~ `Child Category`) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(breaks = seq(100, 700, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, 'Accent'))(10)) +
  theme(aspect.ratio = 1) +
  theme_bw() 

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# Lab 4 Question 4

ca_childcare |>
  group_by(Region, study_year) |>
  summarise(median_income = median(mhi_2018)) |>
  ungroup() |>
  pivot_wider(names_from = study_year,
              values_from = median_income,
              names_prefix = "Median Household Income ") |>
  arrange(desc(`Median Household Income 2018`)) |>
  select(Region, `Median Household Income 2008`, `Median Household Income 2018`)

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: Lab 2, Challenge 2, Lab

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Lab 2 Question 16

ggplot(data = surveys, 
       mapping = aes(y = species, x = weight)
       ) +
  geom_jitter(colour = "orange3", alpha = 0.6) +
  geom_boxplot(outliers = FALSE) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Rodent Weights by Different Species",
       x = "Weight (grams)",
       y = '',
       subtitle = "Sepcies")

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

# Lab 4 Question 4

ca_childcare |>
  group_by(Region, study_year) |>
  summarise(median_income = median(mhi_2018)) |>
  ungroup() |>
  pivot_wider(names_from = study_year,
              values_from = median_income,
              names_prefix = "Median Household Income ") |>
  arrange(desc(`Median Household Income 2018`)) |>
  select(Region, `Median Household Income 2008`, `Median Household Income 2018`) 

```

-   Example of function formatting

```{r}
#| label: r-2-3

# Lab 3 Question 8

teacher_evals_clean |>
  group_by(academic_degree, seniority, sex) |>
  summarise(avg_seniority = mean(seniority),
            min_seniority = min(seniority),
            max_seniority = max(seniority),
            unique_teachers = n_distinct(teacher_id)
            )

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

# Will implement in Final

```

-   Example of function stops

```{r}
#| label: r-3-function-stops

# Will implement in Final

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

# Lab 4 Question 7

ggplot(ca_childcare, mapping = aes(x = mhi_2018, y = mc_infant)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "Household Income ($)",
       y = "",
       title = "Median Household Income vs. Median Weekly Childcare Price",
       subtitle = "Median Weekly Childcare Price ($)")

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Lab 2 Question 16
# Reader will not tilt their head since species is in the y-axis

ggplot(data = surveys, 
       mapping = aes(y = species, x = weight)
       ) +
  geom_jitter(colour = "orange3", alpha = 0.6) +
  geom_boxplot(outliers = FALSE) +
  labs(title = "Rodent Weights by Different Species",
       x = "Weight (grams)",
       y = '',
       subtitle = "Sepcies")

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

# Challenge 3

  ggplot(data = teacher_evals_compare) +
  geom_bar(aes(x = sen_level, fill = SET_level), position = "stack") +
  labs(x = "Seniority of Instructor",
       subtitle = "Number of Sections",
       fill = "SET Levels") +
  scale_fill_manual(values = c("steelblue", "orange3")) +
  theme_bw()

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

# Lab 4 Question 6

ca_childcare |>
  
  pivot_longer(mc_infant:mc_preschool,
               names_to = "Child Category",
               values_to = "Median Price") |>
  
  select(Region, 
         study_year, 
         `Child Category`, 
         `Median Price`) |>
  
  mutate(`Child Category` = fct_recode(.f = `Child Category`,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"),
         
         `Child Category` = fct_relevel(`Child Category`,
                                        "Infant", 
                                        "Toddler", 
                                        "Preschool")
         ) |>
  
  ggplot(aes(x = study_year, 
             y = `Median Price`, 
             color = fct_reorder2(.f = Region, 
                                  .x = study_year, 
                                  .y = `Median Price`)
             )
         ) +
  
  geom_point() +
  geom_smooth(aes(colour = factor(Region), 
                  method = "loess")) +
  
  facet_wrap(~ `Child Category`) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(breaks = seq(100, 700, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, 'Accent'))(10)) +
  theme(aspect.ratio = 1) +
  theme_bw() 

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

# Lab 2 Question 16
# This code places species on the y-axis so readers no longer tilt their head

#| label: boxplot


ggplot(data = surveys, 
       mapping = aes(y = species, x = weight)
       ) +
  geom_jitter(colour = "orange3", alpha = 0.6) +
  geom_boxplot(outliers = FALSE) +
  labs(title = "Rodent Weights by Different Species",
       x = "Weight (grams)",
       y = '',
       subtitle = "Sepcies")
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2

# Lab 9 Question 2

babyData <- enframe(results, 
        name = 'simulation_number', 
        value = 'ncorrect')


babyData |>
  count(ncorrect) |>
  mutate(proportions = n / sum(n)) |> 
  select(ncorrect, proportions) |>
  pivot_wider(names_from = ncorrect,
              values_from = proportions) |>
  gt() |>
  
  tab_header(title = 'Proportion of Simulations for Correctly Returned Babies') |>
  cols_label(`0` = '0 Babies',
             `1` = '1 Baby',
             `2` = '2 Babies',
             `4` = '4 Babies') |>
 
   tab_options(table.font.size = 12,
               table.font.names = 'Georgia')

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3

# Lab 4 Question 6

ca_childcare |>
  
  pivot_longer(mc_infant:mc_preschool,
               names_to = "Child Category",
               values_to = "Median Price") |>
  
  select(Region, 
         study_year, 
         `Child Category`, 
         `Median Price`) |>
  
  mutate(`Child Category` = fct_recode(.f = `Child Category`,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"),
         
         `Child Category` = fct_relevel(`Child Category`,
                                        "Infant", 
                                        "Toddler", 
                                        "Preschool")
         ) |>
  
  ggplot(aes(x = study_year, 
             y = `Median Price`, 
             color = fct_reorder2(.f = Region, 
                                  .x = study_year, 
                                  .y = `Median Price`)
             )
         ) +
  
  geom_point() +
  geom_smooth(aes(colour = factor(Region), 
                  method = "loess")) +
  
  facet_wrap(~ `Child Category`) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(breaks = seq(100, 700, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_brewer(palette = "Accent") +
  theme(aspect.ratio = 1) +
  theme_bw() 

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1

# Lab 4 Question 6

ca_childcare |>
  
  pivot_longer(mc_infant:mc_preschool,
               names_to = "Child Category",
               values_to = "Median Price") |>
  
  select(Region, 
         study_year, 
         `Child Category`, 
         `Median Price`) |>
  
  mutate(`Child Category` = fct_recode(.f = `Child Category`,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"),
         
         `Child Category` = fct_relevel(`Child Category`,
                                        "Infant", 
                                        "Toddler", 
                                        "Preschool")
         ) |>
  
  ggplot(aes(x = study_year, 
             y = `Median Price`, 
             color = fct_reorder2(.f = Region, 
                                  .x = study_year, 
                                  .y = `Median Price`)
             )
         ) +
  
  geom_point() +
  geom_smooth(aes(colour = factor(Region), 
                  method = "loess")) +
  
  facet_wrap(~ `Child Category`) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(breaks = seq(100, 700, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, 'Accent'))(10)) +
  theme(aspect.ratio = 1) +
  theme_bw() 

```

-   I can use annotations

```{r}
#| label: dvs-3-2

# Challenge 2 (Hot) 

ggplot(data = surveys, 
       mapping = aes(y = species,
                     x = weight,
                     color = genus)) +
  geom_boxplot() +
  scale_color_manual(values = cdPalette_grey) + 
  annotate("text", y = 14, x = 250, label = "Onychomys") +
  annotate("text", y = 13, x = 250, label = "Dipodomys") +
  annotate("text", y = 12, x = 250, label = "Chaetodipus") +
  annotate("text", y = 11, x = 250, label = "Dipodomys") +
  annotate("text", y = 10, x = 250, label = "Dipodomys") +
  annotate("text", y = 9, x = 250, label = "Reithrodontomys") +
  annotate("text", y = 8, x = 250, label = "Peromyscus") +
  annotate("text", y = 7, x = 250, label = "Onychomys") +
  annotate("text", y = 6, x = 250, label = "Sigmodon") +
  annotate("text", y = 5, x = 250, label = "Reithrodontomys") +
  annotate("text", y = 4, x = 250, label = "Perognathus") +
  annotate("text", y = 3, x = 250, label = "Peromyscus") +
  annotate("text", y = 2, x = 250, label = "Chaetodipus") +
  annotate("text", y = 1, x = 250, label = "Neotoma") +
  theme(legend.position = "none") +
  labs(x = "Weight (g)",
       y = "",
       subtitle = "Species",
       title = "Rodent Weight by Species")

```

-   I can be creative...

```{r}
#| label: dvs-3-3

# Lab 4 Question 6

ca_childcare |>
  
  pivot_longer(mc_infant:mc_preschool,
               names_to = "Child Category",
               values_to = "Median Price") |>
  
  select(Region, 
         study_year, 
         `Child Category`, 
         `Median Price`) |>
  
  mutate(`Child Category` = fct_recode(.f = `Child Category`,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"),
         
         `Child Category` = fct_relevel(`Child Category`,
                                        "Infant", 
                                        "Toddler", 
                                        "Preschool")
         ) |>
  
  ggplot(aes(x = study_year, 
             y = `Median Price`, 
             color = fct_reorder2(.f = Region, 
                                  .x = study_year, 
                                  .y = `Median Price`)
             )
         ) +
  
  geom_point() +
  geom_smooth(aes(colour = factor(Region), 
                  method = "loess")) +
  
  facet_wrap(~ `Child Category`) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(breaks = seq(100, 700, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, 'Accent'))(10)) +
  theme(aspect.ratio = 1) +
  theme_bw() 

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

# Lab 3 Question 11


stu_fail <- teacher_evals_clean |>
  
  group_by(teacher_id) |>
  filter(seniority == 1) |>
  summarise(avg_fail = mean(percent_failed_cur), .groups = "drop")

stu_fail |>
  filter(avg_fail == max(avg_fail) |
         avg_fail == min(avg_fail))

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

# Will implement in Final

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# Lab 3 Question 8

#| label: exploring-demographics-of-instructors
# code chunk for Q7
  
teacher_evals_clean |>
  group_by(academic_degree, seniority, sex) |>
  summarise(avg_seniority = mean(seniority),
            min_seniority = min(seniority),
            max_seniority = max(seniority),
            unique_teachers = n_distinct(teacher_id)
            )


```

-   Example 2

```{r}
#| label: dvs-5-2

# Will implement in Final

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

# Lab 9 Question 2

babyData <- enframe(results, 
        name = 'simulation_number', 
        value = 'ncorrect')


babyData |>
  count(ncorrect) |>
  mutate(proportions = n / sum(n)) |> 
  select(ncorrect, proportions) |>
  pivot_wider(names_from = ncorrect,
              values_from = proportions) |>
  gt() |>
  
  tab_header(title = 'Proportion of Simulations for Correctly Returned Babies') |>
  cols_label(`0` = '0 Babies',
             `1` = '1 Baby',
             `2` = '2 Babies',
             `4` = '4 Babies') |>
 
   tab_options(table.font.size = 12,
               table.font.names = 'Georgia')
```

-   Example 2

```{r}
#| label: dvs-6-2

# Lab 8 Question 3

evals |>
  mutate(seniority = ifelse(seniority <= 4, 
                            'Junior (4 years or less)', 
                            'Senior (more than 4 years)')) |>
  distinct(teacher_id,
           seniority,
           academic_degree,
           sex) |>
  
  pivot_longer(cols = seniority:sex,
               names_to = 'lvl',
               values_to = 'vals') |>
  
  count(vals) |>
  
  pivot_wider(names_from = vals,
              values_from = n) |>
  
  select(Female = female,
         Male = male,
         `Junior (4 years or less)`,
         `Senior (more than 4 years)`,
         `No Degree` = no_dgr,
         Masters = ma,
         Doctorate = dr,
         Professor = prof) |>
  kable(format = 'html') |>
  kable_styling(bootstrap_options = c('condensed', 
                                      'hover', 
                                      'striped')
                )
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

# Lab 9 Question 2

babyData <- enframe(results, 
        name = 'simulation_number', 
        value = 'ncorrect')


babyData |>
  count(ncorrect) |>
  mutate(proportions = n / sum(n)) |> 
  select(ncorrect, proportions) |>
  pivot_wider(names_from = ncorrect,
              values_from = proportions) |>
  gt() |>
  
  tab_header(title = 'Proportion of Simulations for Correctly Returned Babies') |>
  cols_label(`0` = '0 Babies',
             `1` = '1 Baby',
             `2` = '2 Babies',
             `4` = '4 Babies') |>
 
   tab_options(table.font.size = 12,
               table.font.names = 'Georgia')

```

-   Example 2

```{r}
#| label: dvs-7-2

# Lab 8 Question 4

fish |>
  map_int(.f = ~ sum(is.na(.x))) |>
  kable(format = 'html',
        caption = 'Missing Values in Aggregate') |>
  kable_styling(bootstrap_options = c('condensed', 
                                      'hover', 
                                      'striped')
                )

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

# Lab 4 Question 3

ca_childcare <- ca_childcare |> 
  mutate(Region = fct_collapse(.f = county_name, 
                               
                               "Superior California" = c("Butte County", "Colusa County", 
                                                         "El Dorado County","Glenn County", 
                                                         "Lassen County", "Modoc County", 
                                                         "Nevada County", "Placer County", 
                                                         "Plumas County", "Sacramento County", 
                                                         "Shasta County", "Sierra County", 
                                                         "Siskiyou County", "Sutter County", 
                                                         "Tehama County", "Yolo County", 
                                                         "Yuba County"), 
                               "North Coast" = c("Del Norte County", "Humboldt County", 
                                                 "Lake County", "Mendocino County", 
                                                 "Napa County", "Sonoma County", 
                                                 "Trinity County"),
                               "San Francisco Bay Area" = c("Alameda County", "Contra Costa County", 
                                                            "Marin County", "San Francisco County",
                                                            "San Mateo County", "Santa Clara County", 
                                                            "Solano County"),
                               "Northen San Joaquin Valley" = c("Alpine County", "Amador County", 
                                                                "Calaveras County", "Madera County", 
                                                                "Mariposa County", "Merced County", 
                                                                "Mono County", "San Joaquin County", 
                                                                "Stanislaus County", "Tuolumne County"),
                               "Central Coast" = c("Monterey County", "San Benito County", 
                                                   "San Luis Obispo County", "Santa Barbara County", 
                                                   "Santa Cruz County", "Ventura County"),
                               "Southern San Joaquin Valley" = c("Fresno County", "Inyo County", 
                                                                 "Kern County", "Kings County", 
                                                                 "Tulare County"),
                               "Inland Empire" = c("Riverside County", "San Bernardino County"),
                               "LA County" = c("Los Angeles County"),
                               "Orange County" = c("Orange County"),
                               "San Diego-Imperial" =c("Imperial County", "San Diego County")
              
                               ),
         .after = county_fips_code
         )

```

-   `across()`

```{r}
#| label: pe-1-across

# Lab 3 Question 7

teacher_evals_clean |>
  filter(across(course_id:sex, is.na)) |>
  distinct(course_id, teacher_id, percent_failed_cur)

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

# Lab 8 Question 4

fish |>
  map_int(.f = ~ sum(is.na(.x))) |>
  kable(format = 'html',
        caption = 'Missing Values in Aggregate') |>
  kable_styling(bootstrap_options = c('condensed', 
                                      'hover', 
                                      'striped')
                )

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

# Lab 7 Question 4

rescale_01 <- function(x) {
  
  stopifnot(is.numeric(x), length(x) > 1)
  
  minimum <- min(x, na.rm = TRUE)
  maximum <- max(x, na.rm = TRUE)
  (x - minimum) / (maximum - minimum)
  
}

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2


# Lab 7 Question 3

cond_index <- function(length, weight){
  
  return((weight / length^3) * 100)
  
}


```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

# Lab 3 Question 7

teacher_evals_clean |>
  filter(across(course_id:sex, is.na)) |>
  distinct(course_id, teacher_id, percent_failed_cur)

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

# Lab 8 Question 1

map_chr(surveys, typeof) |>
  bind_rows()|>
  kable(format = 'html',
        caption = 'Variable Data Types',
        align = 'c')

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

# Will implement in Final

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not or deprecated

```{r}
#| label: pe-4-1

# Lab 3 Question 7

teacher_evals_clean |>
  filter(across(course_id:sex, is.na)) |>
  distinct(course_id, teacher_id, percent_failed_cur)

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

# Lab 4 Question 6

ca_childcare |>
  
  pivot_longer(mc_infant:mc_preschool,
               names_to = "Child Category",
               values_to = "Median Price") |>
  
  select(Region, 
         study_year, 
         `Child Category`, 
         `Median Price`) |>
  
  mutate(`Child Category` = fct_recode(.f = `Child Category`,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"),
         
         `Child Category` = fct_relevel(`Child Category`,
                                        "Infant", 
                                        "Toddler", 
                                        "Preschool")
         ) |>
  
  ggplot(aes(x = study_year, 
             y = `Median Price`, 
             color = fct_reorder2(.f = Region, 
                                  .x = study_year, 
                                  .y = `Median Price`)
             )
         ) +
  
  geom_point() +
  geom_smooth(aes(colour = factor(Region), 
                  method = "loess")) +
  
  facet_wrap(~ `Child Category`) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(breaks = seq(100, 700, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, 'Accent'))(10)) +
  theme(aspect.ratio = 1) +
  theme_bw() 
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

# Lab 9 Question 1


randomBabies <- function(nBabies = 4){
  
  shuff_babies <- sample(1:nBabies)
  return(sum(1:nBabies == shuff_babies))
    
}


results <- map_int(.x = 1:10000,
                   .f = ~ randomBabies())

```

-   Example 2

```{r}
#| label: dsm-1-2

# Will implement in Final

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

# Lab 2 Question 17 

species_mod <- aov(data = surveys, weight ~ species)

summary(species_mod)

```

-   Example 2

```{r}
#| label: dsm-2-2

# Lab 4 Question 8

reg_mod1 <- lm(data = ca_childcare, mc_infant ~ mhi_2018)
summary(reg_mod1)

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

Throughout the duration of this course, I was able to successfully revise my thinking by transitioning from my perspective of programming in SQL and Python to tidy and efficient programming in R. I recognized my habitual functional programming style echoing in certain areas of R, specifically throughout iterations and my tendencies of using loops. This was heavily illustrated in week 8 of the course when inquiring about functions and leveraging functions in place of while and for loops. Within lab 8 question 4 highlighted below, I was able to leverage the map_int() function instead of loops to sum all instances of empty values across the \`fish\` data set. This enabled me to revise my traditional perception of functional programming and incorporate a tidy and efficient R code.

```{r}

# Lab 8 Question 4

fish |>
  map_int(.f = ~ sum(is.na(.x))) |>
  kable(format = 'html',
        caption = 'Missing Values in Aggregate') |>
  kable_styling(bootstrap_options = c('condensed', 
                                      'hover', 
                                      'striped')
                )

```

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

Throughout the course, I successfully extended my thinking my reducing redundancies to ensure an efficient programming style. In the code chunk below, I had originally developed two pipe operators - one to retrieve the maximum average student course failures and one for the minimum average student course failures in lab 3 question 11. However, I reduced 5 lines of code by applying the range() function that simultanously calculates the max and min of numeric vectors to store both the minimum and maximum proportions of avgerage student failures in the stu_fail() object.

```{r}

# Lab 3 Question 11


stu_fail <- teacher_evals_clean |>
  
  group_by(teacher_id) |>
  filter(seniority == 1) |>
  summarise(avg_fail = mean(percent_failed_cur), .groups = "drop") |>
  filter(avg_fail %in% range(avg_fail))

```

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
